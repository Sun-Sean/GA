print(fitnesses)
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
}
set.seed(1)
datax <- (matrix(rnorm(50),10,5))
datay <- 1:10 + rnorm(10)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
traceback()
select <- function(datax,datay,p,mu,
selection_type,
model_type,
max_iter = 100,
fitness_func = fitness_aic,
k=NULL){
# generate initial population
# generate initial population
population <- init(p,datax)
# convert datatype
datax <- as.matrix(datax)
if(is.null(fitness_func)){
fitness_func <- fitness_aic
}
'
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
'
# begin iteration
for(iter in 1:max_iter){
# get fitness
fitnesses <- fitness_func(datax,datay,population,p,model_type)
# begin selection
if(selection_type == 'twoprop'){
parents <- twopropselection(fitnesses)
}else if(selection_type == 'tournament'){
parents <- tournament(fitnesses,k)
}else if(selection_type == 'rank'){
parents <- rankselection(rank(fitnesses))
}else if(selection_type == 'stochastic'){
parents <- sus(fitnesses)
}
# crossover
offsprings <- crossover(parents,population)
# mutation
population <- mutation(offsprings,mu)
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
print(population[index_zeros,])
population[index_zeros,] <- sample(c(0,1),size=p,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
}
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
}
set.seed(1)
datax <- (matrix(rnorm(50),10,5))
datay <- 1:10 + rnorm(10)
p=2
mu = 0.01
selection_type <- 'twoprop'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select <- function(datax,datay,p,mu,
selection_type,
model_type,
max_iter = 100,
fitness_func = fitness_aic,
k=NULL){
# generate initial population
# generate initial population
population <- init(p,datax)
# convert datatype
datax <- as.matrix(datax)
if(is.null(fitness_func)){
fitness_func <- fitness_aic
}
'
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
'
# begin iteration
for(iter in 1:max_iter){
# get fitness
fitnesses <- fitness_func(datax,datay,population,p,model_type)
# begin selection
if(selection_type == 'twoprop'){
parents <- twopropselection(fitnesses)
}else if(selection_type == 'tournament'){
parents <- tournament(fitnesses,k)
}else if(selection_type == 'rank'){
parents <- rankselection(rank(fitnesses))
}else if(selection_type == 'stochastic'){
parents <- sus(fitnesses)
}
# crossover
offsprings <- crossover(parents,population)
# mutation
population <- mutation(offsprings,mu)
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
print(population[index_zeros,])
print(sample(c(0,1),size=p,replace = TRUE))
population[index_zeros,] <- sample(c(0,1),size=p,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
}
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
}
set.seed(1)
datax <- (matrix(rnorm(50),10,5))
datay <- 1:10 + rnorm(10)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
# assume data is n (no. of obs.) by p (no. of variables)
init <- function(p,datax){
# get the number of variables
gene_length <- dim(datax)[2]
# create matrix
mat <- sample(c(0,1),size = gene_length*p, replace = TRUE)
dim(mat) <- c(p,gene_length)
# make sure no row is all zero
while(any(rowSums(mat) < 1)){
index_zeros <- which(rowSums(mat) < 1)[1]
mat[index_zeros,] <- sample(c(0,1),size=gene_length,replace = TRUE)
}
# return matrix
mat
}
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
population[index_zeros,] <- sample(c(0,1),size=gene_length,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
# begin iteration
for(iter in 1:max_iter){
# get fitness
fitnesses <- fitness_func(datax,datay,population,p,model_type)
# begin selection
if(selection_type == 'twoprop'){
parents <- twopropselection(fitnesses)
}else if(selection_type == 'tournament'){
parents <- tournament(fitnesses,k)
}else if(selection_type == 'rank'){
parents <- rankselection(rank(fitnesses))
}else if(selection_type == 'stochastic'){
parents <- sus(fitnesses)
}
# crossover
offsprings <- crossover(parents,population)
# mutation
population <- mutation(offsprings,mu)
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
population[index_zeros,] <- sample(c(0,1),size=gene_length,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
}
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
select <- function(datax,datay,p,mu,
selection_type,
model_type,
max_iter = 100,
fitness_func = fitness_aic,
k=NULL){
# generate initial population
# generate initial population
population <- init(p,datax)
# convert datatype
datax <- as.matrix(datax)
if(is.null(fitness_func)){
fitness_func <- fitness_aic
}
'
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
'
gene_length <- dim(data[x])[2]
# begin iteration
for(iter in 1:max_iter){
# get fitness
fitnesses <- fitness_func(datax,datay,population,p,model_type)
# begin selection
if(selection_type == 'twoprop'){
parents <- twopropselection(fitnesses)
}else if(selection_type == 'tournament'){
parents <- tournament(fitnesses,k)
}else if(selection_type == 'rank'){
parents <- rankselection(rank(fitnesses))
}else if(selection_type == 'stochastic'){
parents <- sus(fitnesses)
}
# crossover
offsprings <- crossover(parents,population)
# mutation
population <- mutation(offsprings,mu)
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
population[index_zeros,] <- sample(c(0,1),size=gene_length,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
}
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
}
source('./R/crossover.R')
source('./R/Fitness.R')
source('./R/Mutation.R')
source('./R/selection.R')
source('./R/Initialization.R')
select <- function(datax,datay,p,mu,
selection_type,
model_type,
max_iter = 100,
fitness_func = fitness_aic,
k=NULL){
# generate initial population
# generate initial population
population <- init(p,datax)
# convert datatype
datax <- as.matrix(datax)
if(is.null(fitness_func)){
fitness_func <- fitness_aic
}
'
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
'
gene_length <- dim(data[x])[2]
# begin iteration
for(iter in 1:max_iter){
# get fitness
fitnesses <- fitness_func(datax,datay,population,p,model_type)
# begin selection
if(selection_type == 'twoprop'){
parents <- twopropselection(fitnesses)
}else if(selection_type == 'tournament'){
parents <- tournament(fitnesses,k)
}else if(selection_type == 'rank'){
parents <- rankselection(rank(fitnesses))
}else if(selection_type == 'stochastic'){
parents <- sus(fitnesses)
}
# crossover
offsprings <- crossover(parents,population)
# mutation
population <- mutation(offsprings,mu)
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
population[index_zeros,] <- sample(c(0,1),size=gene_length,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
}
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
}
set.seed(1)
datax <- (matrix(rnorm(50),10,5))
datay <- 1:10 + rnorm(10)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
traceback()
select <- function(datax,datay,p,mu,
selection_type,
model_type,
max_iter = 100,
fitness_func = fitness_aic,
k=NULL){
# generate initial population
# generate initial population
population <- init(p,datax)
# convert datatype
datax <- as.matrix(datax)
if(is.null(fitness_func)){
fitness_func <- fitness_aic
}
'
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
'
gene_length <- dim(datax)[2]
# begin iteration
for(iter in 1:max_iter){
# get fitness
fitnesses <- fitness_func(datax,datay,population,p,model_type)
# begin selection
if(selection_type == 'twoprop'){
parents <- twopropselection(fitnesses)
}else if(selection_type == 'tournament'){
parents <- tournament(fitnesses,k)
}else if(selection_type == 'rank'){
parents <- rankselection(rank(fitnesses))
}else if(selection_type == 'stochastic'){
parents <- sus(fitnesses)
}
# crossover
offsprings <- crossover(parents,population)
# mutation
population <- mutation(offsprings,mu)
# prevent all zeros
while(any(rowSums(population) < 1)){
index_zeros <- which(rowSums(population) < 1)[1]
population[index_zeros,] <- sample(c(0,1),size=gene_length,replace = TRUE)
}
print(AIC_min(datax,datay,population,p,model_type))
}
fitnesses <- fitness_func(datax,datay,population,p,model_type)
fittest_individual <- which.max(fitnesses)
fitness_best <- fitnesses[fittest_individual]
return(list('fitness' = fitness_best,
'individual' = population[fittest_individual,]))
}
set.seed(1)
datax <- (matrix(rnorm(50),10,5))
datay <- 1:10 + rnorm(10)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
set.seed(2)
datax <- (matrix(rnorm(50),10,5))
datay <- 1:10 + rnorm(10)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
set.seed(1)
datax <- (matrix(rnorm(1000),50,20))
datay <- 1:50 + rnorm(50)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
set.seed(5)
datax <- (matrix(rnorm(5000),100,50))
datay <- 1:50 + rnorm(50)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
set.seed(5)
datax <- (matrix(rnorm(5000),100,50))
datay <- 1:100 + rnorm(100)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
set.seed(10)
set.seed(1)
datax <- (matrix(rnorm(5000),100,50))
datay <- 1:100 + rnorm(100)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,10,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 30)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
datax <- (matrix(rnorm(5000),100,50))
datay <- 1:100 + rnorm(100)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
set.seed(1)
datax <- (matrix(rnorm(100),20,5))
datay <- 1:20 + rnorm(20)
p=2
mu = 0.01
selection_type <- 'twoprop'
model_type <- 'lm'
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 10)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 20)
selection_type <- 'rank'
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,5,0.01,selection_type,model_type,max_iter = 50)
select(datax,datay,30,0.01,selection_type,model_type,max_iter = 50)
# select
library(datasets)
data(iris)
View(iris)
datasets::AirPassengers
Sys.setenv(LANG = "en")
Sys.setenv(LANG = "en")
library(GA)
testthat::test_package("GA")
testthat::test_package("GA")
remove.packages("GA")
library(GA)
testthat::test_package("GA")
